// ExternalFileScreen.kt (в папке screens)
package com.example.registrationapp.screens

import android.app.Activity
import android.content.Intent
import android.net.Uri
import android.os.Environment
import android.provider.DocumentsContract
import android.util.Log
import android.widget.Toast
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import java.io.BufferedReader
import java.io.FileOutputStream
import java.io.IOException
import java.io.InputStreamReader

private const val READ_REQUEST_CODE = 42
private const val WRITE_REQUEST_CODE = 43

@Composable
fun ExternalFileScreen() {
    val context = LocalContext.current
    var fileContent by remember { mutableStateOf("") }

    // Launcher for opening a file
    val openFileLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.OpenDocument(),
        onResult = { uri: Uri? ->
            uri?.let {
                loadFileContent(context, it) { content ->
                    fileContent = content ?: ""
                }
            }
        }
    )

    // Launcher for saving a file
    val saveFileLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.CreateDocument("text/plain"), // Use "text/plain" for .txt files
        onResult = { uri: Uri? ->
            uri?.let {
                saveFileContent(context, it, fileContent)
            }
        }
    )


    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text(text = "Работа с внешними файлами")

        OutlinedTextField(
            value = fileContent,
            onValueChange = { fileContent = it },
            label = { Text("Содержимое файла") },
            modifier = Modifier
                .fillMaxWidth()
                .height(200.dp)
        )

        Row(
            horizontalArrangement = Arrangement.spacedBy(8.dp),
            modifier = Modifier.fillMaxWidth()
        ) {
            Button(
                onClick = {
                    openFileLauncher.launch(arrayOf("text/plain")) // Launch the file picker
                },
                modifier = Modifier.weight(1f)
            ) {
                Text("Открыть")
            }

            Button(
                onClick = {
                    // Open the save dialog
                    saveFileLauncher.launch("my_file.txt") //  Provide a default file name
                },
                modifier = Modifier.weight(1f)
            ) {
                Text("Сохранить")
            }
        }
    }
}

private fun loadFileContent(context: Context, uri: Uri, onContentLoaded: (String?) -> Unit) {
    try {
        val inputStream = context.contentResolver.openInputStream(uri)
        val reader = BufferedReader(InputStreamReader(inputStream))
        val content = StringBuilder()
        reader.use {
            var line: String?
            while (reader.readLine().also { line = it } != null) {
                content.append(line).append("\n")
            }
        }
        onContentLoaded(content.toString())
    } catch (e: IOException) {
        Log.e("ExternalFileScreen", "Error loading file: ${e.message}")
        Toast.makeText(context, "Ошибка при открытии файла", Toast.LENGTH_SHORT).show()
        onContentLoaded(null)
    }
}

private fun saveFileContent(context: Context, uri: Uri, content: String) {
    try {
        context.contentResolver.openOutputStream(uri)?.use { outputStream ->
            outputStream.write(content.toByteArray())
        }
        Toast.makeText(context, "Файл сохранен", Toast.LENGTH_SHORT).show()
    } catch (e: IOException) {
        Log.e("ExternalFileScreen", "Error saving file: ${e.message}")
        Toast.makeText(context, "Ошибка при сохранении файла", Toast.LENGTH_SHORT).show()
    }
}
