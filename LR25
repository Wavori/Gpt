#2
// WeakPasswordCheckScreen.kt (в папке screens)
package com.example.registrationapp.screens

import android.content.Context
import android.util.Log
import android.widget.Toast
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.unit.dp
import java.io.BufferedReader
import java.io.IOException
import java.io.InputStreamReader

@Composable
fun WeakPasswordCheckScreen() {
    val context = LocalContext.current
    var username by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    var passwordFeedback by remember { mutableStateOf("") }
    var isRegistrationEnabled by remember { mutableStateOf(false) }

    val weakPasswords = remember { mutableStateListOf<String>() } // Используем MutableStateList

    LaunchedEffect(context) {  // Load passwords only once when the composable is created
        loadWeakPasswords(context, weakPasswords)
    }


    // Function to check password
    fun checkPasswordStrength(password: String) {
        if (weakPasswords.contains(password)) {
            passwordFeedback = "Пароль ненадежный!"
            isRegistrationEnabled = false
        } else {
            passwordFeedback = ""
            isRegistrationEnabled = username.isNotEmpty() && password.isNotEmpty()  // Enable button if both fields are filled
        }
    }


    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text(text = "Регистрация")

        OutlinedTextField(
            value = username,
            onValueChange = {
                username = it
                isRegistrationEnabled = password.isNotEmpty() && it.isNotEmpty() // Enable button when username is not empty
            },
            label = { Text("Логин") },
            modifier = Modifier.fillMaxWidth()
        )

        OutlinedTextField(
            value = password,
            onValueChange = {
                password = it
                checkPasswordStrength(it)  // Call the check when password changes
                isRegistrationEnabled = username.isNotEmpty() && it.isNotEmpty()
            },
            label = { Text("Пароль") },
            visualTransformation = PasswordVisualTransformation(),
            modifier = Modifier.fillMaxWidth()
        )
        if (passwordFeedback.isNotEmpty()) {
            Text(
                text = passwordFeedback,
                color = androidx.compose.ui.graphics.Color.Red
            )
        }


        Button(
            onClick = {
                //  Действия при регистрации
                Toast.makeText(context, "Регистрация: Логин - $username, Пароль - $password", Toast.LENGTH_SHORT).show()
                // Добавьте логику сохранения данных (например, в Shared Preferences)
            },
            enabled = isRegistrationEnabled,
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("Зарегистрироваться")
        }
    }
}

private fun loadWeakPasswords(context: Context, weakPasswords: MutableList<String>) {
    try {
        val inputStream = context.assets.open("weak_passwords.txt")
        val reader = BufferedReader(InputStreamReader(inputStream))
        var line: String?
        while (reader.readLine().also { line = it } != null) {
            weakPasswords.add(line!!.trim())
        }
        reader.close()
        Log.d("WeakPasswords", "Loaded ${weakPasswords.size} weak passwords")
    } catch (e: IOException) {
        Log.e("WeakPasswords", "Error loading weak passwords: ${e.message}")
        Toast.makeText(context, "Ошибка загрузки списка ненадежных паролей.", Toast.LENGTH_SHORT).show()
    }
}



#3
// NoteScreen.kt (в папке screens)
package com.example.registrationapp.screens

import android.content.Context
import android.os.Environment
import android.util.Log
import android.widget.Toast
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import java.io.File
import java.io.FileOutputStream
import java.io.IOException
import java.text.SimpleDateFormat
import java.util.*

@Composable
fun NoteScreen() {
    val context = LocalContext.current
    var noteTitle by remember { mutableStateOf("") }
    var noteContent by remember { mutableStateOf("") }

    val isSaveEnabled by remember {
        derivedStateOf { noteTitle.isNotBlank() && noteContent.isNotBlank() }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text(text = "Создание заметки")

        OutlinedTextField(
            value = noteTitle,
            onValueChange = { noteTitle = it },
            label = { Text("Название") },
            modifier = Modifier.fillMaxWidth()
        )

        OutlinedTextField(
            value = noteContent,
            onValueChange = { noteContent = it },
            label = { Text("Содержание") },
            modifier = Modifier
                .fillMaxWidth()
                .height(200.dp) // Set a reasonable height
        )

        Button(
            onClick = {
                saveNote(context, noteTitle, noteContent)
                noteTitle = ""
                noteContent = ""
            },
            enabled = isSaveEnabled,
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("Сохранить")
        }
    }
}

private fun saveNote(context: Context, title: String, content: String) {
    val timeStamp = SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(Date())
    val fileName = "Note_${timeStamp}_${title.replace(" ", "_")}.txt" // Use timestamp and title for unique file name
    val directory = File(context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "app_notes")

    if (!directory.exists()) {
        if (!directory.mkdirs()) {
            Log.e("NoteScreen", "Failed to create directory")
            Toast.makeText(context, "Ошибка при создании директории", Toast.LENGTH_SHORT).show()
            return
        }
    }

    val file = File(directory, fileName)

    try {
        FileOutputStream(file).use { outputStream ->
            outputStream.write("Название: $title\nСодержание:\n$content".toByteArray())
        }
        Toast.makeText(context, "Заметка сохранена: ${file.absolutePath}", Toast.LENGTH_SHORT).show()
        Log.d("NoteScreen", "Note saved to: ${file.absolutePath}")
    } catch (e: IOException) {
        Log.e("NoteScreen", "Error saving note: ${e.message}")
        Toast.makeText(context, "Ошибка при сохранении заметки", Toast.LENGTH_SHORT).show()
    }
}


#4
// NoteScreen.kt (в папке screens)
package com.example.registrationapp.screens

import android.annotation.SuppressLint
import android.content.Context
import android.os.Environment
import android.util.Log
import android.widget.Toast
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileOutputStream
import java.io.IOException
import java.text.SimpleDateFormat
import java.util.*

@SuppressLint("CoroutineCreationDuringComposition")
@Composable
fun NoteScreen() {
    val context = LocalContext.current
    var noteTitle by remember { mutableStateOf("") }
    var noteContent by remember { mutableStateOf("") }
    var fileList by remember { mutableStateOf(listOf<File>()) }
    val coroutineScope = rememberCoroutineScope()

    val isSaveEnabled by remember {
        derivedStateOf { noteTitle.isNotBlank() && noteContent.isNotBlank() }
    }

    LaunchedEffect(Unit) {
        coroutineScope.launch {
            fileList = loadNotes(context)
        }
    }

    fun refreshFileList() {
        coroutineScope.launch {
            fileList = loadNotes(context)
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text(text = "Создание заметки", textAlign = TextAlign.Center, modifier = Modifier.fillMaxWidth())

        OutlinedTextField(
            value = noteTitle,
            onValueChange = { noteTitle = it },
            label = { Text("Название") },
            modifier = Modifier.fillMaxWidth()
        )

        OutlinedTextField(
            value = noteContent,
            onValueChange = { noteContent = it },
            label = { Text("Содержание") },
            modifier = Modifier
                .fillMaxWidth()
                .height(150.dp)
        )

        Button(
            onClick = {
                coroutineScope.launch {
                    saveNote(context, noteTitle, noteContent)
                    noteTitle = ""
                    noteContent = ""
                    fileList = loadNotes(context)  // Refresh the file list after saving
                }
            },
            enabled = isSaveEnabled,
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("Сохранить")
        }

        Text(text = "Список заметок", textAlign = TextAlign.Center, modifier = Modifier.fillMaxWidth())

        if (fileList.isEmpty()) {
            Text(text = "Нет сохраненных заметок.")
        } else {
            LazyColumn {
                items(fileList) { file ->
                    NoteItem(file = file, onDeleteClick = {
                        coroutineScope.launch {
                            deleteNote(context, file)
                            fileList = loadNotes(context)  // Refresh the file list after deleting
                        }
                    })
                }
            }
        }
    }
}

@Composable
fun NoteItem(file: File, onDeleteClick: () -> Unit) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp)
            .clickable {
                //  Реализация просмотра заметки
            },
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(text = file.name, color = Color.Black)  // Установите цвет текста
